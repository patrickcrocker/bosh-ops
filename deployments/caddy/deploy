#! /usr/bin/env bash
set -eu
set -o pipefail

# To generate a manifest with variable interpolation placeholders intact,
# suitable to be committed to source control

function get_yaml_value() {
  local key=${1:?key null or not set}
  local file=${2:?file null or not set}

  if ! yq_cli=$(command -v yq); then
    echo "unable to locate yq binary (https://github.com/mikefarah/yq)" >&2
    exit 1
  fi

  if [[ "$(yq --version)" != *"version v4"* ]]; then
    echo "yq v4 is required (found $(yq --version))" >&2
    exit 12
  fi

  "$yq_cli" "$key" "$file"
}

base="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../../.." && pwd )"
repo="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." && pwd )"

# make sure we have caddy-bosh-release
if [[ ! -d "${repo}/tmp/caddy-bosh-release" ]] ; then
  pushd ${repo}/tmp > /dev/null
    git clone https://github.com/dpb587/caddy-bosh-release.git &> /dev/null
  popd > /dev/null
fi

# checkout specific version of caddy-bosh-release
REF="v$(get_yaml_value '.caddy_version' "${repo}/deployments/caddy/versions.yml")"
echo "Checking out to caddy-bosh-release to ref: ${REF}"

pushd ${repo}/tmp/caddy-bosh-release > /dev/null
  git fetch &> /dev/null
  git checkout ${REF} &> /dev/null
  git log -1 --pretty=oneline
popd > /dev/null

# Generated manifest
manifest="${repo}/deployments/caddy/caddy.yml"

bosh interpolate "${repo}/tmp/caddy-bosh-release/manifests/caddy.yml" \
  -o "${repo}/deployments/caddy/operations.yml" \
  -l "${repo}/deployments/caddy/versions.yml" \
  -l "${repo}/deployments/caddy/Caddyfile.yml" \
  > "$manifest"

echo -e "# Generated file - do not edit directly!\n---\n$(cat $manifest)" > "$manifest"
echo "Generating manifest: $manifest"

bosh deploy -d caddy \
  -l "${base}/bosh-secrets/vars-caddy.yml" \
  -l "${base}/bosh-secrets/vars-static-ips.yml" \
  "${manifest}" \
  "$@"

echo "Finished deploying: caddy"
